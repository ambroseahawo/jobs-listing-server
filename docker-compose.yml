services:
  auth:
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
      target: development
    command: sh -c "cd apps/auth && npx prisma migrate deploy && npm run start:dev auth"
    ports:
      - "3001:3001"
    env_file:
      - ./apps/auth/.env
    depends_on:
      - auth-postgres
      - rabbitmq
      - redis
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - app
      - rabbitmq-network

  # users:
  #   build:
  #     context: .
  #     dockerfile: ./apps/users/Dockerfile
  #     target: development
  #   command: sh -c "cd apps/users && npx prisma migrate deploy && npm run start:dev users"
  #   ports:
  #     - "3002:3002"
  #   env_file:
  #     - ./apps/users/.env
  #   depends_on:
  #     - users-postgres
  #     - rabbitmq
  #     - redis
  #   volumes:
  #     - .:/usr/src/app
  #     - /usr/src/app/node_modules
  #   networks:
  #     - app
  #     - rabbitmq-network

  api-gateway:
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
      target: development
    command: npm run start:dev api-gateway
    ports:
      - "3000:3000"
    env_file:
      - ./apps/api-gateway/.env
    depends_on:
      - auth
      - users
      - rabbitmq
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - app
      - rabbitmq-network

  # Separate PostgreSQL instances for each service
  auth-postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_DB: ${AUTH_DB_NAME}
    networks:
      - app
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"

  users-postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_PASSWORD: ${USERS_DB_PASSWORD}
      POSTGRES_USER: ${USERS_DB_USER}
      POSTGRES_DB: ${USERS_DB_NAME}
    networks:
      - app
    volumes:
      - users_postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
      
  adminer:
    image: adminer
    restart: always
    depends_on:
      - auth-postgres
      - users-postgres
    networks:
      - app
    ports:
      - 8080:8080

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - rabbitmq-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app
    restart: unless-stopped

volumes:
  auth_postgres_data:
    driver: local
  users_postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  rabbitmq-network:
    driver: bridge
  app:
    driver: bridge
